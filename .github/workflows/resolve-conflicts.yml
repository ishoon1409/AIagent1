name: AI Conflict Resolution

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/*.py'

jobs:
  check-conflicts:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Copy resolver scripts
        run: |
          cat > import_resolver.py << 'EOF'
          import re

          def extract_imports(text):
              """Extract import statements from a block of text."""
              imports = []
              for line in text.split('\n'):
                  line = line.strip()
                  if line.startswith('import ') or line.startswith('from '):
                      imports.append(line)
              return imports

          def sort_imports(imports):
              """Sort imports according to PEP 8 guidelines."""
              stdlib_imports = []
              third_party_imports = []
              local_imports = []
              
              # Common standard library modules
              stdlib_modules = [
                  'abc', 'argparse', 'array', 'asyncio', 'base64', 'collections', 'copy', 
                  'csv', 'datetime', 'decimal', 'enum', 'functools', 'glob', 'io', 'itertools', 
                  'json', 'logging', 'math', 'os', 'pathlib', 're', 'random', 'shutil', 'socket', 
                  'sqlite3', 'string', 'sys', 'tempfile', 'threading', 'time', 'typing', 'unittest', 
                  'urllib', 'uuid', 'warnings', 'weakref', 'xml', 'zipfile'
              ]
              
              for imp in imports:
                  if imp.startswith('import '):
                      module = imp.split()[1].split('.')[0]
                      if module in stdlib_modules:
                          stdlib_imports.append(imp)
                      else:
                          third_party_imports.append(imp)
                  elif imp.startswith('from '):
                      module = imp.split()[1].split('.')[0]
                      if module in stdlib_modules:
                          stdlib_imports.append(imp)
                      elif module.startswith(('app', 'project')):  # Customize for your project
                          local_imports.append(imp)
                      else:
                          third_party_imports.append(imp)
              
              # Sort each group alphabetically
              stdlib_imports.sort()
              third_party_imports.sort()
              local_imports.sort()
              
              # Combine groups with blank lines between them
              result = stdlib_imports[:]
              if stdlib_imports and third_party_imports:
                  result.append('')
              result.extend(third_party_imports)
              if (stdlib_imports or third_party_imports) and local_imports:
                  result.append('')
              result.extend(local_imports)
              
              return result

          def resolve_import_conflicts(content):
              """Resolve import order conflicts in the given file content."""
              # Regex to find git merge conflict markers with their content
              conflict_pattern = re.compile(
                  r'<<<<<<< .*?\n(.*?)\n=======\n(.*?)\n>>>>>>> .*?\n', 
                  re.DOTALL
              )
              
              def resolve_conflict(match):
                  head_content = match.group(1)
                  feature_content = match.group(2)
                  
                  # Extract imports from both branches
                  head_imports = extract_imports(head_content)
                  feature_imports = extract_imports(feature_content)
                  
                  # Combine unique imports
                  all_imports = []
                  for imp in head_imports + feature_imports:
                      if imp not in all_imports:
                          all_imports.append(imp)
                  
                  # Sort according to PEP 8
                  sorted_imports = sort_imports(all_imports)
                  
                  # Return the sorted imports as a string
                  return '\n'.join(sorted_imports)
              
              # Replace each conflict with the resolved imports
              resolved_content = conflict_pattern.sub(resolve_conflict, content)
              return resolved_content
          EOF

          cat > ai_conflict_resolver.py << 'EOF'
          import boto3
          import json
          import re
          import os
          from import_resolver import resolve_import_conflicts, extract_imports

          class AIConflictResolver:
              def __init__(self, model_id='anthropic.claude-v2'):
                  self.bedrock_runtime = boto3.client(
                      'bedrock-runtime',
                      region_name='us-east-1'  # Change to your region
                  )
                  self.model_id = model_id
              
              def detect_conflict_type(self, content, file_path):
                  """Detect the type of conflict."""
                  if file_path.endswith('.py') and self._is_import_conflict(content):
                      return "import"
                  return "other"
              
              def _is_import_conflict(self, content):
                  """Check if this is likely an import order conflict."""
                  # Look for conflict markers near import statements
                  conflict_pattern = re.compile(
                      r'<<<<<<< .*?\n(.*?)\n=======\n(.*?)\n>>>>>>> .*?\n',
                      re.DOTALL
                  )
                  
                  for match in conflict_pattern.finditer(content):
                      head_content = match.group(1)
                      feature_content = match.group(2)
                      
                      head_has_imports = 'import ' in head_content or 'from ' in head_content
                      feature_has_imports = 'import ' in feature_content or 'from ' in feature_content
                      
                      if head_has_imports and feature_has_imports:
                          # Check if imports are the only difference
                          head_imports = set(extract_imports(head_content))
                          feature_imports = set(extract_imports(feature_content))
                          
                          if head_imports != feature_imports:
                              return True
                  
                  return False
              
              def resolve_file(self, file_path):
                  """Resolve conflicts in the given file."""
                  try:
                      with open(file_path, 'r', encoding='utf-8') as f:
                          content = f.read()
                      
                      if '<<<<<<< ' not in content:
                          print(f"No conflicts found in {file_path}")
                          return False
                      
                      conflict_type = self.detect_conflict_type(content, file_path)
                      
                      if conflict_type == "import":
                          # Use our specialized import resolver
                          resolved_content = resolve_import_conflicts(content)
                          print(f"Resolved import order conflicts in {file_path}")
                      else:
                          # Use AI for other conflict types
                          resolved_content = self._resolve_with_ai(content, file_path)
                          print(f"Used AI to resolve conflicts in {file_path}")
                      
                      with open(file_path, 'w', encoding='utf-8') as f:
                          f.write(resolved_content)
                      
                      return True
                      
                  except Exception as e:
                      print(f"Error processing {file_path}: {str(e)}")
                      return False
              
              def _resolve_with_ai(self, content, file_path):
                  """Use AWS Bedrock to resolve conflicts."""
                  file_ext = os.path.splitext(file_path)[1]
                  
                  # Extract all conflicts
                  conflict_pattern = re.compile(
                      r'<<<<<<< .*?\n(.*?)\n=======\n(.*?)\n>>>>>>> .*?\n',
                      re.DOTALL
                  )
                  
                  def resolve_conflict(match):
                      head_content = match.group(1)
                      feature_content = match.group(2)
                      
                      # Prepare the prompt for AI
                      prompt = f"""
                      I need to resolve a Git merge conflict in a {file_ext} file. Please analyze both versions and provide the resolved code.
                      
                      VERSION A (HEAD):
                      ```
                      {head_content}
                      ```
                      
                      VERSION B (incoming):
                      ```
                      {feature_content}
                      ```
                      
                      In your answer, provide ONLY the resolved code without any explanations or formatting. Do not include conflict markers or version headers.
                      """
                      
                      # Call AWS Bedrock API
                      response = self.bedrock_runtime.invoke_model(
                          modelId=self.model_id,
                          body=json.dumps({
                              "prompt": prompt,
                              "max_tokens_to_sample": 4000,
                              "temperature": 0.2,
                              "top_p": 0.9,
                          })
                      )
                      
                      # Parse the response
                      response_body = json.loads(response['body'].read())
                      resolved = response_body['completion'].strip()
                      
                      # Clean up any markdown code blocks the model might have added
                      resolved = resolved.replace('```python', '').replace('```', '').strip()
                      
                      return resolved
                  
                  # Replace each conflict with the AI-resolved version
                  resolved_content = conflict_pattern.sub(resolve_conflict, content)
                  return resolved_content
          EOF

          cat > resolve_conflicts.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import sys
          import argparse
          import subprocess
          from ai_conflict_resolver import AIConflictResolver

          def find_conflict_files(repo_path='.', file_ext=None):
              """Find files with Git merge conflicts."""
              try:
                  cmd = ['git', 'diff', '--name-only', '--diff-filter=U']
                  result = subprocess.run(cmd, capture_output=True, text=True, cwd=repo_path)
                  
                  if result.returncode != 0:
                      print(f"Error finding conflicted files: {result.stderr}")
                      return []
                  
                  files = [f.strip() for f in result.stdout.split('\n') if f.strip()]
                  
                  if file_ext:
                      files = [f for f in files if f.endswith(file_ext)]
                      
                  return files
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return []

          def main():
              parser = argparse.ArgumentParser(description='Resolve Git merge conflicts with AI.')
              parser.add_argument('--path', default='.', help='Path to the Git repository')
              parser.add_argument('--extension', default=None, help='Only process files with this extension (e.g. .py)')
              parser.add_argument('--file', help='Process a specific file')
              parser.add_argument('--model', default='anthropic.claude-v2', help='AWS Bedrock model to use')
              parser.add_argument('--auto-commit', action='store_true', help='Automatically commit resolved files')
              
              args = parser.parse_args()
              
              resolver = AIConflictResolver(model_id=args.model)
              resolved_count = 0
              
              if args.file:
                  # Resolve a specific file
                  if resolver.resolve_file(args.file):
                      resolved_count += 1
              else:
                  # Find and resolve all conflicted files
                  conflict_files = find_conflict_files(args.path, args.extension)
                  
                  if not conflict_files:
                      print("No conflicted files found.")
                      return
                      
                  print(f"Found {len(conflict_files)} files with conflicts")
                  
                  for file_path in conflict_files:
                      full_path = os.path.join(args.path, file_path)
                      if resolver.resolve_file(full_path):
                          resolved_count += 1
              
              print(f"\nSuccessfully resolved {resolved_count} files")
              
              # Auto-commit if requested
              if args.auto_commit and resolved_count > 0:
                  try:
                      cmd_add = ['git', 'add'] + conflict_files
                      subprocess.run(cmd_add, check=True, cwd=args.path)
                      
                      cmd_commit = ['git', 'commit', '-m', 'Auto-resolved merge conflicts']
                      subprocess.run(cmd_commit, check=True, cwd=args.path)
                      
                      print("Successfully committed resolved files")
                  except subprocess.CalledProcessError as e:
                      print(f"Error committing resolved files: {str(e)}")

          if __name__ == "__main__":
              main()
          EOF
          
      - name: Try to merge
        id: merge
        run: |
          git config --local user.email "github-actions@github.com"
          git config --local user.name "GitHub Actions"
          BASE_BRANCH="\${{ github.base_ref }}"
          CURRENT_BRANCH="\${{ github.head_ref }}"
          git fetch origin \$BASE_BRANCH
          git checkout \$CURRENT_BRANCH
          if git merge origin/\$BASE_BRANCH --no-commit --no-ff; then
            echo "no_conflicts=true" >> \$GITHUB_OUTPUT
            git merge --abort
          else
            echo "no_conflicts=false" >> \$GITHUB_OUTPUT
          fi
        continue-on-error: true
          
      - name: Resolve conflicts
        if: steps.merge.outputs.no_conflicts == 'false'
        run: |
          git config --local user.email "github-actions@github.com"
          git config --local user.name "GitHub Actions"
          BASE_BRANCH="\${{ github.base_ref }}"
          CURRENT_BRANCH="\${{ github.head_ref }}"
          git fetch origin \$BASE_BRANCH
          git checkout \$CURRENT_BRANCH
          
          # Try to merge and leave conflicts
          git merge origin/\$BASE_BRANCH || true
          
          # Resolve conflicts
          python resolve_conflicts.py --extension .py
          
          # Commit and push resolved files
          git add .
          git commit -m "Auto-resolved merge conflicts"
          git push origin \$CURRENT_BRANCH